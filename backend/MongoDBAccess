from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
from bson.objectid import ObjectId
import random
import string
uri = "mongodb+srv://kalkofahi:KaramMongoDBUMass@clustermain.n3xygz5.mongodb.net/?retryWrites=true&w=majority"
# Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))
# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!\n")
except Exception as e:
    print(e)

databaseS = client.StudentDB

databaseI = client.InstructorDB
collectionI = databaseI.InstructorC

'''
For inserting one instructor/class (instructor with 2 classes still has only 1 collection)
Can also be used to insert a class for an existing instructor
'''
def insert_instructor(firstName,lastName,email,password,className): #returns classID string or False
    addInstructor = True
    addClass = True
    firstName = firstName.replace(" ","_").lower()
    lastName = lastName.replace(" ","_").lower()

    for collection in databaseI.list_collection_names():
        if firstName+"_"+lastName == collection:
            addInstructor = False
            for doc in databaseI[collection].find():
                if doc["className"] == className:
                    print("Class already exists for instructor: "+firstName+" "+lastName)
                    addClass = False
                    break
    if addClass:
        # instructor name and email, classID is a randomly generated 6 digit code ie: "2N9ORP", and the rest are question/attendance stats
        classID = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        addDoc = {"email": email, "password": password, "className": className, "classID": classID, "questionDenom": 0, "attendanceDenom": 0, "numStudents": 0}
        if addInstructor:
            databaseI.create_collection(firstName+"_"+lastName)
        databaseI[firstName+"_"+lastName].insert_one(addDoc)
        databaseS.create_collection(classID)
        return classID
    return False

def fetch_instructor(fullName=""):
    arrInfo = []
    fullName = fullName.replace(" ","_").lower()
    if fullName != "":
        for collection in databaseI.list_collection_names():
            if collection == fullName:
                for doc in databaseI[fullName].find():
                    arrInfo.append(doc)
    return arrInfo

# Always run this when finished adding/removing students
def update_instructors():
    for collection in databaseI.list_collection_names():
        for doc in databaseI[collection].find():
            # Updates instructor document with student count
            databaseI[collection].update_one({"classID": doc["classID"]},{"$set":{"numStudents":databaseS[doc["classID"]].estimated_document_count()}})

def creatingQRCode(fullName, classID):
    fullName = fullName.replace(" ","_").lower()
    classIDValid = False
    denom = -1
    for doc in databaseI[fullName].find():
        if doc["classID"] == classID:
            classIDValid = True
            denom = doc["attendanceDenom"]
    if classIDValid:
        databaseI[fullName].update_one({"classID": classID},{"$set":{"attendanceDenom":denom+1}})

def studentScannedCode(fullName, classID):
    fullName = fullName.replace(" ","_").lower()
    validEntries = False
    curScore = -1
    for doc in databaseS[classID].find():
        if doc["fullName"] == fullName:
            validEntries = True
            curScore = doc["attendanceScore"]
    if validEntries:
        databaseS[classID].update_one({"fullName": fullName},{"$set":{"attendanceScore":curScore+1}})

# For inserting one student
def insert_student(fullName,email,classID,spireID=-1):
    fullName = fullName.replace(" ","_").lower()
    canAdd = True
    for doc in databaseS[classID].find():
        if "email" in doc:
            if doc["email"] == email:
                canAdd = False
                print("Could not add student: ''"+fullName+"''. Email already in class")
                break
    if canAdd:
        addDoc = { "fullName": fullName, "email": email, "spireID": spireID, "classID": classID, "questionScore": 0, "attendanceScore": 0}
        databaseS[classID].insert_one(addDoc)

def fetch_student(fullName="",email="",classID=""):
    fullName = fullName.replace(" ","_").lower()
    arrInfo = []
    # Function accepts limited values, in case a student doesn't have access to all
    if fullName != "":
        for collection in databaseS.list_collection_names():
            for doc in databaseS[collection].find():
                if doc["fullName"] == fullName:
                    arrInfo.append(doc)
    elif email != "":
        for doc in collectionI.find():
            if doc["email"] == email:
                arrInfo.append(doc)
    elif classID != "":
        for doc in collectionI.find():
            if doc["classID"] == classID:
                arrInfo.append(doc)
    return arrInfo

# examples

# professor michaels adds a class and 3 students joint
insAdded = insert_instructor("Prof","Michaels","p1@umass.edu","ironCladPass1","187")
if insAdded != False:
    insert_student("Student 1","s1@umass.edu",insAdded)
    insert_student("Student 2","s2@umass.edu",insAdded)
    insert_student("Student 3","s3@umass.edu",insAdded)

# professor tori adds a class and 2 students joint
insAdded = insert_instructor("Prof","Tori","p2@umass.edu","ironCladPass2","220")
if insAdded != False:
    insert_student("Student 2","s2@umass.edu",insAdded)
    insert_student("Student 3","s3@umass.edu",insAdded)

# professor michaels adds another class and 2 students joint
insAdded = insert_instructor("Prof","Michaels","p1@umass.edu","ironCladPass1","230")
if insAdded != False:
    insert_student("Student 1","s1@umass.edu",insAdded)
    insert_student("Student 3","s3@umass.edu",insAdded)

print(fetch_student("Student 3")) # student info is pulled and printed to screen
print(fetch_instructor("prof michaels")) # instructor info is pulled and printed to screen

update_instructors() # updates all instructor information, ALWAYS run after students are added or removed to classes

creatingQRCode("prof_michaels","YCY71H") #QR code is created by professors, and attendanceDenom in (n/attendanceDenom) is incremented by 1
studentScannedCode("student_1","YCY71H") #QR code is scanned by student, and attendanceScore in (attendanceScore/n) is incremented by 1
